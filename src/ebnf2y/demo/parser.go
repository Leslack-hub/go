// Code generated by goyacc -o parser.go demo.y. DO NOT EDIT.

//line demo.y:2

//TODO Put your favorite license here

// yacc source generated by ebnf2y[1]
// at 2025-01-23 11:42:16.280738 +0800 CST m=+0.001176251
//
//  $ ebnf2y -start Expression -o demo.y demo.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://modernc.org/ebnf2y

package main //TODO real package name
import __yyfmt__ "fmt"

//line demo.y:15

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"modernc.org/strutil"
)

//line demo.y:28
type yySymType struct {
	yys  int
	item interface{} //TODO insert real field(s)
}

const AND = 57346
const ANDNOT = 57347
const BOOLEAN = 57348
const FLOAT = 57349
const IDENTIFIER = 57350
const IMAGINARY = 57351
const INTEGER = 57352
const LSH = 57353
const RSH = 57354
const STR = 57355

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"AND",
	"ANDNOT",
	"BOOLEAN",
	"FLOAT",
	"IDENTIFIER",
	"IMAGINARY",
	"INTEGER",
	"LSH",
	"RSH",
	"STR",
	"'^'",
	"'|'",
	"'-'",
	"'+'",
	"','",
	"'!'",
	"'('",
	"')'",
	"'.'",
	"'&'",
	"'%'",
	"'/'",
	"'*'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line demo.y:286

//TODO remove demo stuff below

var _parserResult interface{}

type (
	Expression      interface{}
	Expression1     interface{}
	Expression11    interface{}
	ExpressionList  interface{}
	ExpressionList1 interface{}
	Factor          interface{}
	Factor1         interface{}
	Factor11        interface{}
	Literal         interface{}
	Operand         interface{}
	Operand1        interface{}
	QualifiedIdent  interface{}
	QualifiedIdent1 interface{}
	Start           interface{}
	Term            interface{}
	Term1           interface{}
	Term11          interface{}
)

func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}

		fmt.Println(v)
	}
}

// End of demo stuff

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	21, 27,
	-2, 12,
}

const yyPrivate = 57344

const yyLast = 52

var yyAct = [...]int8{
	2, 36, 29, 4, 3, 40, 48, 46, 31, 32,
	37, 17, 18, 22, 19, 20, 50, 38, 21, 47,
	30, 33, 34, 35, 7, 16, 9, 10, 41, 8,
	28, 12, 42, 24, 25, 26, 27, 1, 45, 39,
	15, 43, 13, 14, 6, 5, 49, 44, 23, 11,
	0, 51,
}

var yyPact = [...]int16{
	10, -1000, -1000, -1000, -1000, 5, -1000, -1000, -1000, -1000,
	-1000, 19, -3, -1000, -1000, -10, 10, -1000, -1000, -1000,
	-1000, -1000, -17, 10, -1000, -1000, -1000, -1000, 10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10, -14, -1000,
	11, -1000, -1000, -15, -1000, -1000, -1000, -1000, -1000, -2,
	10, -1000,
}

var yyPgo = [...]int8{
	0, 0, 49, 48, 47, 46, 3, 45, 44, 43,
	42, 41, 40, 39, 37, 4, 31, 30,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 3, 3, 3, 4, 5,
	5, 6, 7, 7, 8, 8, 8, 8, 9, 9,
	9, 9, 9, 9, 10, 10, 10, 11, 11, 12,
	13, 13, 14, 15, 16, 16, 17, 17, 17, 17,
	17, 17, 17, 17,
}

var yyR2 = [...]int8{
	0, 2, 0, 3, 1, 1, 1, 1, 2, 0,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 0, 1, 2,
	0, 2, 1, 2, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -14, -1, -15, -6, -7, -8, 14, 19, 16,
	17, -2, -16, -10, -9, -12, 20, 6, 7, 9,
	10, 13, 8, -3, 14, 15, 16, 17, -17, 5,
	23, 11, 12, 24, 25, 26, 4, 20, -1, -13,
	22, -15, -6, -11, -4, -1, 21, 8, 21, -5,
	18, -1,
}

var yyDef = [...]int8{
	12, -2, 32, 2, 34, 0, 13, 14, 15, 16,
	17, 1, 33, 11, 24, 20, 12, 18, 19, 21,
	22, 23, 30, 12, 4, 5, 6, 7, 12, 36,
	37, 38, 39, 40, 41, 42, 43, -2, 0, 29,
	0, 3, 35, 0, 28, 9, 26, 31, 25, 8,
	12, 10,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 19, 3, 3, 3, 24, 23, 3,
	20, 21, 26, 17, 18, 16, 22, 25, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 14, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 15,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line demo.y:82
		{
			yyVAL.item = []Expression{yyDollar[1].item, yyDollar[2].item} //TODO 1
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line demo.y:88
		{
			yyVAL.item = []Expression1(nil) //TODO 2
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line demo.y:92
		{
			yyVAL.item = append(yyDollar[1].item.([]Expression1), yyDollar[2].item, yyDollar[3].item) //TODO 3
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:98
		{
			yyVAL.item = "^" //TODO 4
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:102
		{
			yyVAL.item = "|" //TODO 5
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:106
		{
			yyVAL.item = "-" //TODO 6
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:110
		{
			yyVAL.item = "+" //TODO 7
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line demo.y:116
		{
			yyVAL.item = []ExpressionList{yyDollar[1].item, yyDollar[2].item} //TODO 8
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line demo.y:122
		{
			yyVAL.item = []ExpressionList1(nil) //TODO 9
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line demo.y:126
		{
			yyVAL.item = append(yyDollar[1].item.([]ExpressionList1), ",", yyDollar[3].item) //TODO 10
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line demo.y:132
		{
			yyVAL.item = []Factor{yyDollar[1].item, yyDollar[2].item} //TODO 11
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line demo.y:138
		{
			yyVAL.item = nil //TODO 12
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:142
		{
			yyVAL.item = yyDollar[1].item //TODO 13
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:148
		{
			yyVAL.item = "^" //TODO 14
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:152
		{
			yyVAL.item = "!" //TODO 15
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:156
		{
			yyVAL.item = "-" //TODO 16
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:160
		{
			yyVAL.item = "+" //TODO 17
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:166
		{
			yyVAL.item = yyDollar[1].item //TODO 18
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:170
		{
			yyVAL.item = yyDollar[1].item //TODO 19
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:174
		{
			yyVAL.item = yyDollar[1].item //TODO 20
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:178
		{
			yyVAL.item = yyDollar[1].item //TODO 21
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:182
		{
			yyVAL.item = yyDollar[1].item //TODO 22
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:186
		{
			yyVAL.item = yyDollar[1].item //TODO 23
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:192
		{
			yyVAL.item = yyDollar[1].item //TODO 24
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line demo.y:196
		{
			yyVAL.item = []Operand{yyDollar[1].item, "(", yyDollar[3].item, ")"} //TODO 25
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line demo.y:200
		{
			yyVAL.item = []Operand{"(", yyDollar[2].item, ")"} //TODO 26
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line demo.y:206
		{
			yyVAL.item = nil //TODO 27
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:210
		{
			yyVAL.item = yyDollar[1].item //TODO 28
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line demo.y:216
		{
			yyVAL.item = []QualifiedIdent{yyDollar[1].item, yyDollar[2].item} //TODO 29
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line demo.y:222
		{
			yyVAL.item = nil //TODO 30
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line demo.y:226
		{
			yyVAL.item = []QualifiedIdent1{".", yyDollar[2].item} //TODO 31
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:232
		{
			_parserResult = yyDollar[1].item //TODO 32
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line demo.y:238
		{
			yyVAL.item = []Term{yyDollar[1].item, yyDollar[2].item} //TODO 33
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line demo.y:244
		{
			yyVAL.item = []Term1(nil) //TODO 34
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line demo.y:248
		{
			yyVAL.item = append(yyDollar[1].item.([]Term1), yyDollar[2].item, yyDollar[3].item) //TODO 35
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:254
		{
			yyVAL.item = yyDollar[1].item //TODO 36
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:258
		{
			yyVAL.item = "&" //TODO 37
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:262
		{
			yyVAL.item = yyDollar[1].item //TODO 38
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:266
		{
			yyVAL.item = yyDollar[1].item //TODO 39
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:270
		{
			yyVAL.item = "%" //TODO 40
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:274
		{
			yyVAL.item = "/" //TODO 41
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:278
		{
			yyVAL.item = "*" //TODO 42
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line demo.y:282
		{
			yyVAL.item = "&&" //TODO 43
		}
	}
	goto yystack /* stack new state and value */
}
